namespace PklCSharp.Generator.Parser;

public enum Tokens
{
    [ExactToken("abstract")]
    Abstract,
    [ExactToken("amends")]
    Amends,
    [ExactToken("as")]
    As,
    [ExactToken("class")]
    Class,
    [ExactToken("const")]
    Const,
    [ExactToken("else")]
    Else,
    [ExactToken("extends")]
    Extends,
    [ExactToken("external")]
    External,
    [ExactToken("false")]
    False,
    [ExactToken("fixed")]
    Fixed,
    [ExactToken("for")]
    For,
    [ExactToken("function")]
    Function,
    [ExactToken("hidden")]
    Hidden,
    [ExactToken("if")]
    If,
    [ExactToken("import")]
    Import,
    [ExactToken("import*")]
    ImportGlob,
    [ExactToken("in")]
    In,
    [ExactToken("is")]
    Is,
    [ExactToken("let")]
    Let,
    [ExactToken("local")]
    Local,
    [ExactToken("module")]
    Module,
    [ExactToken("new")]
    New,
    [ExactToken("nothing")]
    Nothing,
    [ExactToken("null")]
    Null,
    [ExactToken("open")]
    Open,
    [ExactToken("out")]
    Out,
    [ExactToken("outer")]
    Outer,
    [ExactToken("read")]
    Read,
    [ExactToken("read*")]
    ReadGlob,
    [ExactToken("read?")]
    ReadOrNull,
    [ExactToken("super")]
    Super,
    [ExactToken("this")]
    This,
    [ExactToken("throw")]
    Throw,
    [ExactToken("trace")]
    Trace,
    [ExactToken("true")]
    True,
    [ExactToken("typealias")]
    TypeAlias,
    [ExactToken("unknown")]
    Unknown,
    [ExactToken("when")]
    When,
    [ExactToken("(")]
    LParen,
    [ExactToken(")")]
    RParen,
    [ExactToken("{")]
    LBrace,
    [ExactToken("}")]
    RBrace,
    [ExactToken("[")]
    LBrack,
    [ExactToken("]")]
    RBrack,
    [ExactToken("[[")]
    LPred,
    [ExactToken(",")]
    Comma,
    [ExactToken(".")]
    Dot,
    [ExactToken("?.")]
    QDot,
    [ExactToken("??")]
    Coalesce,
    [ExactToken("!!")]
    NonNull,
    [ExactToken("@")]
    At,
    [ExactToken("=")]
    Assign,
    [ExactToken(">")]
    Gt,
    [ExactToken("<")]
    Lt,
    [ExactToken("!")]
    Not,
    [ExactToken("?")]
    Question,
    [ExactToken(":")]
    Colon,
    [ExactToken("->")]
    Arrow,
    [ExactToken("==")]
    Equal,
    [ExactToken("!=")]
    NotEqual,
    [ExactToken("<=")]
    Lte,
    [ExactToken(">=")]
    Gte,
    [ExactToken("&&")]
    And,
    [ExactToken("||")]
    Or,
    [ExactToken("+")]
    Plus,
    [ExactToken("-")]
    Minus,
    [ExactToken("**")]
    Pow,
    [ExactToken("*")]
    Star,
    [ExactToken("/")]
    Div,
    [ExactToken("~/")]
    IntDiv,
    [ExactToken("%")]
    Mod,
    [ExactToken("|")]
    Union,
    [ExactToken("|>")]
    Pipe,
    [ExactToken("...")]
    Spread,
    [ExactToken("...?")]
    QSpread,
    [ExactToken("_")]
    Underscore,
    
    Whitespace,
    NewLineSemiColon,
    EOF,
    LComment,
    BComment,
    ShebangComment,
    DocComment,
    Identifier,
    IntLiteral,
    FloatLiteral,
    SlString,
    MlString,
    StringInterpolation,
    
    // The following are reserved and not used in the current version
    [ExactToken("protected")]
    Protected,
    [ExactToken("override")]
    Override,
    [ExactToken("record")]
    Record,
    [ExactToken("delete")]
    Delete,
    [ExactToken("case")]
    Case,
    [ExactToken("switch")]
    Switch,
    [ExactToken("vararg")]
    Vararg
}
